{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\n\n// Конфигурация Firebase\n// ВНИМАНИЕ: Замените эти данные на свои после создания проекта в Firebase Console\nconst firebaseConfig = {\n  apiKey: \"YOUR_API_KEY\",\n  authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n  projectId: \"YOUR_PROJECT_ID\",\n  storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n  messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n  appId: \"YOUR_APP_ID\"\n};\n\n// Инициализация Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Экспорт сервисов Firebase\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const storage = getStorage(app);\nexport default app;\n\n/*\r\nИНСТРУКЦИЯ ПО НАСТРОЙКЕ FIREBASE:\r\n\r\n1. Создайте проект в Firebase Console (https://console.firebase.google.com/)\r\n2. В разделе Authentication включите аутентификацию по email/password\r\n3. В разделе Firestore Database создайте базу данных в тестовом режиме\r\n4. В разделе Storage создайте хранилище в тестовом режиме\r\n5. В настройках проекта (Project settings) найдите конфигурацию для веб-приложения\r\n6. Замените значения в объекте firebaseConfig выше на ваши значения\r\n7. Для продакшена настройте правила безопасности в Firestore и Storage\r\n\r\nСТРУКТУРА БАЗЫ ДАННЫХ (FIRESTORE):\r\n\r\n- promoters (коллекция)\r\n  - {promoterId} (документ)\r\n    - name: string\r\n    - avatarUrl: string\r\n    - leafletsCount: number\r\n    - createdAt: timestamp\r\n    - updatedAt: timestamp\r\n\r\n- topPromoter (документ)\r\n  - promoterId: string\r\n  - name: string\r\n  - avatarUrl: string\r\n  - reward: string\r\n  - date: timestamp\r\n\r\n- settings (документ)\r\n  - companyLogo: string\r\n  - headerText: string\r\n  - telegramChannel: string\r\n  - managerContacts: array\r\n*/","map":{"version":3,"names":["initializeApp","getAuth","getFirestore","getStorage","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","auth","db","storage"],"sources":["D:/проекты/Promo rating/src/firebase/config.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getStorage } from 'firebase/storage';\r\n\r\n// Конфигурация Firebase\r\n// ВНИМАНИЕ: Замените эти данные на свои после создания проекта в Firebase Console\r\nconst firebaseConfig = {\r\n  apiKey: \"YOUR_API_KEY\",\r\n  authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\r\n  projectId: \"YOUR_PROJECT_ID\",\r\n  storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\r\n  messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\r\n  appId: \"YOUR_APP_ID\"\r\n};\r\n\r\n// Инициализация Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Экспорт сервисов Firebase\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\nexport const storage = getStorage(app);\r\n\r\nexport default app;\r\n\r\n/*\r\nИНСТРУКЦИЯ ПО НАСТРОЙКЕ FIREBASE:\r\n\r\n1. Создайте проект в Firebase Console (https://console.firebase.google.com/)\r\n2. В разделе Authentication включите аутентификацию по email/password\r\n3. В разделе Firestore Database создайте базу данных в тестовом режиме\r\n4. В разделе Storage создайте хранилище в тестовом режиме\r\n5. В настройках проекта (Project settings) найдите конфигурацию для веб-приложения\r\n6. Замените значения в объекте firebaseConfig выше на ваши значения\r\n7. Для продакшена настройте правила безопасности в Firestore и Storage\r\n\r\nСТРУКТУРА БАЗЫ ДАННЫХ (FIRESTORE):\r\n\r\n- promoters (коллекция)\r\n  - {promoterId} (документ)\r\n    - name: string\r\n    - avatarUrl: string\r\n    - leafletsCount: number\r\n    - createdAt: timestamp\r\n    - updatedAt: timestamp\r\n\r\n- topPromoter (документ)\r\n  - promoterId: string\r\n  - name: string\r\n  - avatarUrl: string\r\n  - reward: string\r\n  - date: timestamp\r\n\r\n- settings (документ)\r\n  - companyLogo: string\r\n  - headerText: string\r\n  - telegramChannel: string\r\n  - managerContacts: array\r\n*/ "],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,UAAU,QAAQ,kBAAkB;;AAE7C;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,cAAc;EACtBC,UAAU,EAAE,iCAAiC;EAC7CC,SAAS,EAAE,iBAAiB;EAC5BC,aAAa,EAAE,6BAA6B;EAC5CC,iBAAiB,EAAE,0BAA0B;EAC7CC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGX,aAAa,CAACI,cAAc,CAAC;;AAEzC;AACA,OAAO,MAAMQ,IAAI,GAAGX,OAAO,CAACU,GAAG,CAAC;AAChC,OAAO,MAAME,EAAE,GAAGX,YAAY,CAACS,GAAG,CAAC;AACnC,OAAO,MAAMG,OAAO,GAAGX,UAAU,CAACQ,GAAG,CAAC;AAEtC,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}