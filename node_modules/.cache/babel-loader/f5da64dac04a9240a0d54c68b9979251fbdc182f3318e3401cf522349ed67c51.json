{"ast":null,"code":"import { collection, doc, getDocs, getDoc, addDoc, updateDoc, deleteDoc, query, orderBy, limit, serverTimestamp, setDoc } from 'firebase/firestore';\nimport { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';\nimport { db, storage } from './config';\n\n// Коллекция промоутеров\nconst promotersCollection = collection(db, 'promoters');\nconst topPromoterDoc = doc(db, 'topPromoter');\nconst settingsDoc = doc(db, 'settings');\n\n// Получить всех промоутеров, отсортированных по количеству листовок (по убыванию)\nexport const getPromoters = async () => {\n  try {\n    const q = query(promotersCollection, orderBy('leafletsCount', 'desc'));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Ошибка при получении промоутеров:', error);\n    throw error;\n  }\n};\n\n// Получить топ N промоутеров\nexport const getTopPromoters = async (topCount = 10) => {\n  try {\n    const q = query(promotersCollection, orderBy('leafletsCount', 'desc'), limit(topCount));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Ошибка при получении топ промоутеров:', error);\n    throw error;\n  }\n};\n\n// Получить промоутера по ID\nexport const getPromoterById = async id => {\n  try {\n    const docRef = doc(db, 'promoters', id);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n      return {\n        id: docSnap.id,\n        ...docSnap.data()\n      };\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error('Ошибка при получении промоутера:', error);\n    throw error;\n  }\n};\n\n// Добавить нового промоутера\nexport const addPromoter = async (promoterData, avatarFile) => {\n  try {\n    let avatarUrl = '';\n\n    // Если есть файл аватарки, загружаем его в Storage\n    if (avatarFile) {\n      const storageRef = ref(storage, `avatars/${Date.now()}_${avatarFile.name}`);\n      await uploadBytes(storageRef, avatarFile);\n      avatarUrl = await getDownloadURL(storageRef);\n    }\n\n    // Создаем документ промоутера\n    const newPromoter = {\n      name: promoterData.name,\n      avatarUrl,\n      leafletsCount: promoterData.leafletsCount || 0,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp()\n    };\n    const docRef = await addDoc(promotersCollection, newPromoter);\n    return {\n      id: docRef.id,\n      ...newPromoter\n    };\n  } catch (error) {\n    console.error('Ошибка при добавлении промоутера:', error);\n    throw error;\n  }\n};\n\n// Обновить данные промоутера\nexport const updatePromoter = async (id, promoterData, avatarFile) => {\n  try {\n    const promoterRef = doc(db, 'promoters', id);\n    const promoterSnap = await getDoc(promoterRef);\n    if (!promoterSnap.exists()) {\n      throw new Error('Промоутер не найден');\n    }\n    const currentData = promoterSnap.data();\n    let avatarUrl = currentData.avatarUrl;\n\n    // Если есть новый файл аватарки\n    if (avatarFile) {\n      // Удаляем старую аватарку, если она есть\n      if (avatarUrl) {\n        try {\n          const oldAvatarRef = ref(storage, avatarUrl);\n          await deleteObject(oldAvatarRef);\n        } catch (error) {\n          console.warn('Не удалось удалить старую аватарку:', error);\n        }\n      }\n\n      // Загружаем новую аватарку\n      const storageRef = ref(storage, `avatars/${Date.now()}_${avatarFile.name}`);\n      await uploadBytes(storageRef, avatarFile);\n      avatarUrl = await getDownloadURL(storageRef);\n    }\n\n    // Обновляем документ\n    const updatedPromoter = {\n      ...promoterData,\n      avatarUrl,\n      updatedAt: serverTimestamp()\n    };\n    await updateDoc(promoterRef, updatedPromoter);\n    return {\n      id,\n      ...updatedPromoter\n    };\n  } catch (error) {\n    console.error('Ошибка при обновлении промоутера:', error);\n    throw error;\n  }\n};\n\n// Удалить промоутера\nexport const deletePromoter = async id => {\n  try {\n    const promoterRef = doc(db, 'promoters', id);\n    const promoterSnap = await getDoc(promoterRef);\n    if (!promoterSnap.exists()) {\n      throw new Error('Промоутер не найден');\n    }\n    const promoterData = promoterSnap.data();\n\n    // Удаляем аватарку из Storage, если она есть\n    if (promoterData.avatarUrl) {\n      try {\n        const avatarRef = ref(storage, promoterData.avatarUrl);\n        await deleteObject(avatarRef);\n      } catch (error) {\n        console.warn('Не удалось удалить аватарку:', error);\n      }\n    }\n\n    // Удаляем документ\n    await deleteDoc(promoterRef);\n    return id;\n  } catch (error) {\n    console.error('Ошибка при удалении промоутера:', error);\n    throw error;\n  }\n};\n\n// Получить данные о лучшем промоутере месяца\nexport const getTopPromoter = async () => {\n  try {\n    const docSnap = await getDoc(topPromoterDoc);\n    if (docSnap.exists()) {\n      return docSnap.data();\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error('Ошибка при получении лучшего промоутера:', error);\n    throw error;\n  }\n};\n\n// Установить лучшего промоутера месяца\nexport const setTopPromoter = async topPromoterData => {\n  try {\n    await setDoc(topPromoterDoc, {\n      ...topPromoterData,\n      date: serverTimestamp()\n    });\n    return topPromoterData;\n  } catch (error) {\n    console.error('Ошибка при установке лучшего промоутера:', error);\n    throw error;\n  }\n};\n\n// Получить настройки сайта\nexport const getSettings = async () => {\n  try {\n    const docSnap = await getDoc(settingsDoc);\n    if (docSnap.exists()) {\n      return docSnap.data();\n    } else {\n      // Создаем документ с настройками по умолчанию, если его нет\n      const defaultSettings = {\n        companyLogo: '',\n        headerText: 'Конкурс для лучших! Стань топ-промоутером Петрозаводска!',\n        telegramChannel: '',\n        managerContacts: []\n      };\n      await setDoc(settingsDoc, defaultSettings);\n      return defaultSettings;\n    }\n  } catch (error) {\n    console.error('Ошибка при получении настроек:', error);\n    throw error;\n  }\n};\n\n// Обновить настройки сайта\nexport const updateSettings = async (settingsData, logoFile) => {\n  try {\n    const currentSettings = await getSettings();\n    let logoUrl = currentSettings.companyLogo;\n\n    // Если есть новый файл логотипа\n    if (logoFile) {\n      // Удаляем старый логотип, если он есть\n      if (logoUrl) {\n        try {\n          const oldLogoRef = ref(storage, logoUrl);\n          await deleteObject(oldLogoRef);\n        } catch (error) {\n          console.warn('Не удалось удалить старый логотип:', error);\n        }\n      }\n\n      // Загружаем новый логотип\n      const storageRef = ref(storage, `settings/logo_${Date.now()}`);\n      await uploadBytes(storageRef, logoFile);\n      logoUrl = await getDownloadURL(storageRef);\n    }\n\n    // Обновляем документ\n    const updatedSettings = {\n      ...settingsData,\n      companyLogo: logoUrl\n    };\n    await setDoc(settingsDoc, updatedSettings);\n    return updatedSettings;\n  } catch (error) {\n    console.error('Ошибка при обновлении настроек:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["collection","doc","getDocs","getDoc","addDoc","updateDoc","deleteDoc","query","orderBy","limit","serverTimestamp","setDoc","ref","uploadBytes","getDownloadURL","deleteObject","db","storage","promotersCollection","topPromoterDoc","settingsDoc","getPromoters","q","querySnapshot","docs","map","id","data","error","console","getTopPromoters","topCount","getPromoterById","docRef","docSnap","exists","addPromoter","promoterData","avatarFile","avatarUrl","storageRef","Date","now","name","newPromoter","leafletsCount","createdAt","updatedAt","updatePromoter","promoterRef","promoterSnap","Error","currentData","oldAvatarRef","warn","updatedPromoter","deletePromoter","avatarRef","getTopPromoter","setTopPromoter","topPromoterData","date","getSettings","defaultSettings","companyLogo","headerText","telegramChannel","managerContacts","updateSettings","settingsData","logoFile","currentSettings","logoUrl","oldLogoRef","updatedSettings"],"sources":["D:/проекты/Promo rating/src/firebase/promoterService.js"],"sourcesContent":["import { \r\n  collection, \r\n  doc, \r\n  getDocs, \r\n  getDoc, \r\n  addDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  query, \r\n  orderBy, \r\n  limit, \r\n  serverTimestamp,\r\n  setDoc\r\n} from 'firebase/firestore';\r\nimport { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';\r\nimport { db, storage } from './config';\r\n\r\n// Коллекция промоутеров\r\nconst promotersCollection = collection(db, 'promoters');\r\nconst topPromoterDoc = doc(db, 'topPromoter');\r\nconst settingsDoc = doc(db, 'settings');\r\n\r\n// Получить всех промоутеров, отсортированных по количеству листовок (по убыванию)\r\nexport const getPromoters = async () => {\r\n  try {\r\n    const q = query(promotersCollection, orderBy('leafletsCount', 'desc'));\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    return querySnapshot.docs.map(doc => ({\r\n      id: doc.id,\r\n      ...doc.data()\r\n    }));\r\n  } catch (error) {\r\n    console.error('Ошибка при получении промоутеров:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Получить топ N промоутеров\r\nexport const getTopPromoters = async (topCount = 10) => {\r\n  try {\r\n    const q = query(\r\n      promotersCollection, \r\n      orderBy('leafletsCount', 'desc'), \r\n      limit(topCount)\r\n    );\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    return querySnapshot.docs.map(doc => ({\r\n      id: doc.id,\r\n      ...doc.data()\r\n    }));\r\n  } catch (error) {\r\n    console.error('Ошибка при получении топ промоутеров:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Получить промоутера по ID\r\nexport const getPromoterById = async (id) => {\r\n  try {\r\n    const docRef = doc(db, 'promoters', id);\r\n    const docSnap = await getDoc(docRef);\r\n    \r\n    if (docSnap.exists()) {\r\n      return {\r\n        id: docSnap.id,\r\n        ...docSnap.data()\r\n      };\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка при получении промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Добавить нового промоутера\r\nexport const addPromoter = async (promoterData, avatarFile) => {\r\n  try {\r\n    let avatarUrl = '';\r\n    \r\n    // Если есть файл аватарки, загружаем его в Storage\r\n    if (avatarFile) {\r\n      const storageRef = ref(storage, `avatars/${Date.now()}_${avatarFile.name}`);\r\n      await uploadBytes(storageRef, avatarFile);\r\n      avatarUrl = await getDownloadURL(storageRef);\r\n    }\r\n    \r\n    // Создаем документ промоутера\r\n    const newPromoter = {\r\n      name: promoterData.name,\r\n      avatarUrl,\r\n      leafletsCount: promoterData.leafletsCount || 0,\r\n      createdAt: serverTimestamp(),\r\n      updatedAt: serverTimestamp()\r\n    };\r\n    \r\n    const docRef = await addDoc(promotersCollection, newPromoter);\r\n    return {\r\n      id: docRef.id,\r\n      ...newPromoter\r\n    };\r\n  } catch (error) {\r\n    console.error('Ошибка при добавлении промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Обновить данные промоутера\r\nexport const updatePromoter = async (id, promoterData, avatarFile) => {\r\n  try {\r\n    const promoterRef = doc(db, 'promoters', id);\r\n    const promoterSnap = await getDoc(promoterRef);\r\n    \r\n    if (!promoterSnap.exists()) {\r\n      throw new Error('Промоутер не найден');\r\n    }\r\n    \r\n    const currentData = promoterSnap.data();\r\n    let avatarUrl = currentData.avatarUrl;\r\n    \r\n    // Если есть новый файл аватарки\r\n    if (avatarFile) {\r\n      // Удаляем старую аватарку, если она есть\r\n      if (avatarUrl) {\r\n        try {\r\n          const oldAvatarRef = ref(storage, avatarUrl);\r\n          await deleteObject(oldAvatarRef);\r\n        } catch (error) {\r\n          console.warn('Не удалось удалить старую аватарку:', error);\r\n        }\r\n      }\r\n      \r\n      // Загружаем новую аватарку\r\n      const storageRef = ref(storage, `avatars/${Date.now()}_${avatarFile.name}`);\r\n      await uploadBytes(storageRef, avatarFile);\r\n      avatarUrl = await getDownloadURL(storageRef);\r\n    }\r\n    \r\n    // Обновляем документ\r\n    const updatedPromoter = {\r\n      ...promoterData,\r\n      avatarUrl,\r\n      updatedAt: serverTimestamp()\r\n    };\r\n    \r\n    await updateDoc(promoterRef, updatedPromoter);\r\n    \r\n    return {\r\n      id,\r\n      ...updatedPromoter\r\n    };\r\n  } catch (error) {\r\n    console.error('Ошибка при обновлении промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Удалить промоутера\r\nexport const deletePromoter = async (id) => {\r\n  try {\r\n    const promoterRef = doc(db, 'promoters', id);\r\n    const promoterSnap = await getDoc(promoterRef);\r\n    \r\n    if (!promoterSnap.exists()) {\r\n      throw new Error('Промоутер не найден');\r\n    }\r\n    \r\n    const promoterData = promoterSnap.data();\r\n    \r\n    // Удаляем аватарку из Storage, если она есть\r\n    if (promoterData.avatarUrl) {\r\n      try {\r\n        const avatarRef = ref(storage, promoterData.avatarUrl);\r\n        await deleteObject(avatarRef);\r\n      } catch (error) {\r\n        console.warn('Не удалось удалить аватарку:', error);\r\n      }\r\n    }\r\n    \r\n    // Удаляем документ\r\n    await deleteDoc(promoterRef);\r\n    \r\n    return id;\r\n  } catch (error) {\r\n    console.error('Ошибка при удалении промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Получить данные о лучшем промоутере месяца\r\nexport const getTopPromoter = async () => {\r\n  try {\r\n    const docSnap = await getDoc(topPromoterDoc);\r\n    \r\n    if (docSnap.exists()) {\r\n      return docSnap.data();\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка при получении лучшего промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Установить лучшего промоутера месяца\r\nexport const setTopPromoter = async (topPromoterData) => {\r\n  try {\r\n    await setDoc(topPromoterDoc, {\r\n      ...topPromoterData,\r\n      date: serverTimestamp()\r\n    });\r\n    \r\n    return topPromoterData;\r\n  } catch (error) {\r\n    console.error('Ошибка при установке лучшего промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Получить настройки сайта\r\nexport const getSettings = async () => {\r\n  try {\r\n    const docSnap = await getDoc(settingsDoc);\r\n    \r\n    if (docSnap.exists()) {\r\n      return docSnap.data();\r\n    } else {\r\n      // Создаем документ с настройками по умолчанию, если его нет\r\n      const defaultSettings = {\r\n        companyLogo: '',\r\n        headerText: 'Конкурс для лучших! Стань топ-промоутером Петрозаводска!',\r\n        telegramChannel: '',\r\n        managerContacts: []\r\n      };\r\n      \r\n      await setDoc(settingsDoc, defaultSettings);\r\n      return defaultSettings;\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка при получении настроек:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Обновить настройки сайта\r\nexport const updateSettings = async (settingsData, logoFile) => {\r\n  try {\r\n    const currentSettings = await getSettings();\r\n    let logoUrl = currentSettings.companyLogo;\r\n    \r\n    // Если есть новый файл логотипа\r\n    if (logoFile) {\r\n      // Удаляем старый логотип, если он есть\r\n      if (logoUrl) {\r\n        try {\r\n          const oldLogoRef = ref(storage, logoUrl);\r\n          await deleteObject(oldLogoRef);\r\n        } catch (error) {\r\n          console.warn('Не удалось удалить старый логотип:', error);\r\n        }\r\n      }\r\n      \r\n      // Загружаем новый логотип\r\n      const storageRef = ref(storage, `settings/logo_${Date.now()}`);\r\n      await uploadBytes(storageRef, logoFile);\r\n      logoUrl = await getDownloadURL(storageRef);\r\n    }\r\n    \r\n    // Обновляем документ\r\n    const updatedSettings = {\r\n      ...settingsData,\r\n      companyLogo: logoUrl\r\n    };\r\n    \r\n    await setDoc(settingsDoc, updatedSettings);\r\n    \r\n    return updatedSettings;\r\n  } catch (error) {\r\n    console.error('Ошибка при обновлении настроек:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}