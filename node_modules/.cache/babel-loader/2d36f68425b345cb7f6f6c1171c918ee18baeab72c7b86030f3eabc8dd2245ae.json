{"ast":null,"code":"import { collection, doc, getDocs, getDoc, addDoc, updateDoc, deleteDoc, query, orderBy, limit, serverTimestamp, setDoc } from 'firebase/firestore';\nimport { db } from './config';\n\n// Коллекция промоутеров\nconst promotersCollection = collection(db, 'promoters');\n// Коллекция настроек\nconst settingsCollection = collection(db, 'settings');\nconst topPromoterDoc = doc(settingsCollection, 'topPromoter');\nconst settingsDoc = doc(settingsCollection, 'general');\n\n// Функция для генерации URL аватара на основе имени\nconst generateAvatarUrl = name => {\n  // Используем сервис UI Avatars для генерации аватара по имени\n  const encodedName = encodeURIComponent(name);\n  return `https://ui-avatars.com/api/?name=${encodedName}&background=random&color=fff&size=128`;\n};\n\n// Получить всех промоутеров, отсортированных по количеству листовок (по убыванию)\nexport const getPromoters = async () => {\n  try {\n    const q = query(promotersCollection, orderBy('leafletsCount', 'desc'));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Ошибка при получении промоутеров:', error);\n    throw error;\n  }\n};\n\n// Получить топ N промоутеров\nexport const getTopPromoters = async (topCount = 10) => {\n  try {\n    const q = query(promotersCollection, orderBy('leafletsCount', 'desc'), limit(topCount));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Ошибка при получении топ промоутеров:', error);\n    throw error;\n  }\n};\n\n// Получить промоутера по ID\nexport const getPromoterById = async id => {\n  try {\n    const docRef = doc(db, 'promoters', id);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n      return {\n        id: docSnap.id,\n        ...docSnap.data()\n      };\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error('Ошибка при получении промоутера:', error);\n    throw error;\n  }\n};\n\n// Добавить нового промоутера\nexport const addPromoter = async (promoterData, avatarFile) => {\n  try {\n    // Вместо загрузки файла используем генерацию аватара по имени\n    // или URL, если он предоставлен в promoterData.avatarUrl\n    let avatarUrl = promoterData.avatarUrl || '';\n    if (!avatarUrl && promoterData.name) {\n      avatarUrl = generateAvatarUrl(promoterData.name);\n    }\n\n    // Создаем документ промоутера\n    const newPromoter = {\n      name: promoterData.name,\n      avatarUrl,\n      leafletsCount: Number(promoterData.leafletsCount) || 0,\n      workDays: Number(promoterData.workDays) || 0,\n      district: promoterData.district || '',\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp()\n    };\n\n    // Рассчитываем скорость только если есть дни работы\n    if (newPromoter.workDays > 0) {\n      newPromoter.speed = Math.round(newPromoter.leafletsCount / newPromoter.workDays);\n    } else {\n      newPromoter.speed = 0;\n    }\n    const docRef = await addDoc(promotersCollection, newPromoter);\n    return {\n      id: docRef.id,\n      ...newPromoter\n    };\n  } catch (error) {\n    console.error('Ошибка при добавлении промоутера:', error);\n    throw error;\n  }\n};\n\n// Обновить данные промоутера\nexport const updatePromoter = async (id, promoterData, avatarFile) => {\n  try {\n    const promoterRef = doc(db, 'promoters', id);\n    const promoterSnap = await getDoc(promoterRef);\n    if (!promoterSnap.exists()) {\n      throw new Error('Промоутер не найден');\n    }\n    const currentData = promoterSnap.data();\n\n    // Определяем URL аватара\n    let avatarUrl = promoterData.avatarUrl || currentData.avatarUrl;\n\n    // Если имя изменилось и нет URL аватара, генерируем новый\n    if (!avatarUrl && promoterData.name && promoterData.name !== currentData.name) {\n      avatarUrl = generateAvatarUrl(promoterData.name);\n    }\n\n    // Обновляем документ\n    const updatedPromoter = {\n      ...promoterData,\n      avatarUrl,\n      leafletsCount: Number(promoterData.leafletsCount) || 0,\n      workDays: Number(promoterData.workDays) || 0,\n      district: promoterData.district || '',\n      updatedAt: serverTimestamp()\n    };\n\n    // Рассчитываем скорость только если есть дни работы\n    if (updatedPromoter.workDays > 0) {\n      updatedPromoter.speed = Math.round(updatedPromoter.leafletsCount / updatedPromoter.workDays);\n    } else {\n      updatedPromoter.speed = 0;\n    }\n    await updateDoc(promoterRef, updatedPromoter);\n    return {\n      id,\n      ...updatedPromoter\n    };\n  } catch (error) {\n    console.error('Ошибка при обновлении промоутера:', error);\n    throw error;\n  }\n};\n\n// Удалить промоутера\nexport const deletePromoter = async id => {\n  try {\n    const promoterRef = doc(db, 'promoters', id);\n    const promoterSnap = await getDoc(promoterRef);\n    if (!promoterSnap.exists()) {\n      throw new Error('Промоутер не найден');\n    }\n\n    // Удаляем документ\n    await deleteDoc(promoterRef);\n    return id;\n  } catch (error) {\n    console.error('Ошибка при удалении промоутера:', error);\n    throw error;\n  }\n};\n\n// Получить данные о лучшем промоутере месяца\nexport const getTopPromoter = async () => {\n  try {\n    const docSnap = await getDoc(topPromoterDoc);\n    if (docSnap.exists()) {\n      return docSnap.data();\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error('Ошибка при получении лучшего промоутера:', error);\n    throw error;\n  }\n};\n\n// Установить лучшего промоутера месяца\nexport const setTopPromoter = async topPromoterData => {\n  try {\n    // Если нет URL аватара, но есть имя, генерируем аватар\n    if (!topPromoterData.avatarUrl && topPromoterData.name) {\n      topPromoterData.avatarUrl = generateAvatarUrl(topPromoterData.name);\n    }\n    await setDoc(topPromoterDoc, {\n      ...topPromoterData,\n      date: serverTimestamp()\n    });\n    return topPromoterData;\n  } catch (error) {\n    console.error('Ошибка при установке лучшего промоутера:', error);\n    throw error;\n  }\n};\n\n// Получить настройки сайта\nexport const getSettings = async () => {\n  try {\n    const docSnap = await getDoc(settingsDoc);\n    if (docSnap.exists()) {\n      return docSnap.data();\n    } else {\n      // Создаем документ с настройками по умолчанию, если его нет\n      const defaultSettings = {\n        companyLogo: 'https://via.placeholder.com/200x60?text=Logo',\n        headerText: 'Конкурс для лучших! Стань топ-промоутером Петрозаводска!',\n        telegramChannel: '',\n        managerContacts: []\n      };\n      await setDoc(settingsDoc, defaultSettings);\n      return defaultSettings;\n    }\n  } catch (error) {\n    console.error('Ошибка при получении настроек:', error);\n    throw error;\n  }\n};\n\n// Обновить настройки сайта\nexport const updateSettings = async (settingsData, logoFile) => {\n  try {\n    // Используем URL логотипа из settingsData или оставляем текущий\n    const updatedSettings = {\n      ...settingsData\n    };\n    await setDoc(settingsDoc, updatedSettings);\n    return updatedSettings;\n  } catch (error) {\n    console.error('Ошибка при обновлении настроек:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["collection","doc","getDocs","getDoc","addDoc","updateDoc","deleteDoc","query","orderBy","limit","serverTimestamp","setDoc","db","promotersCollection","settingsCollection","topPromoterDoc","settingsDoc","generateAvatarUrl","name","encodedName","encodeURIComponent","getPromoters","q","querySnapshot","docs","map","id","data","error","console","getTopPromoters","topCount","getPromoterById","docRef","docSnap","exists","addPromoter","promoterData","avatarFile","avatarUrl","newPromoter","leafletsCount","Number","workDays","district","createdAt","updatedAt","speed","Math","round","updatePromoter","promoterRef","promoterSnap","Error","currentData","updatedPromoter","deletePromoter","getTopPromoter","setTopPromoter","topPromoterData","date","getSettings","defaultSettings","companyLogo","headerText","telegramChannel","managerContacts","updateSettings","settingsData","logoFile","updatedSettings"],"sources":["D:/проекты/Promo rating/src/firebase/promoterService.js"],"sourcesContent":["import { \r\n  collection, \r\n  doc, \r\n  getDocs, \r\n  getDoc, \r\n  addDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  query, \r\n  orderBy, \r\n  limit, \r\n  serverTimestamp,\r\n  setDoc\r\n} from 'firebase/firestore';\r\nimport { db } from './config';\r\n\r\n// Коллекция промоутеров\r\nconst promotersCollection = collection(db, 'promoters');\r\n// Коллекция настроек\r\nconst settingsCollection = collection(db, 'settings');\r\nconst topPromoterDoc = doc(settingsCollection, 'topPromoter');\r\nconst settingsDoc = doc(settingsCollection, 'general');\r\n\r\n// Функция для генерации URL аватара на основе имени\r\nconst generateAvatarUrl = (name) => {\r\n  // Используем сервис UI Avatars для генерации аватара по имени\r\n  const encodedName = encodeURIComponent(name);\r\n  return `https://ui-avatars.com/api/?name=${encodedName}&background=random&color=fff&size=128`;\r\n};\r\n\r\n// Получить всех промоутеров, отсортированных по количеству листовок (по убыванию)\r\nexport const getPromoters = async () => {\r\n  try {\r\n    const q = query(promotersCollection, orderBy('leafletsCount', 'desc'));\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    return querySnapshot.docs.map(doc => ({\r\n      id: doc.id,\r\n      ...doc.data()\r\n    }));\r\n  } catch (error) {\r\n    console.error('Ошибка при получении промоутеров:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Получить топ N промоутеров\r\nexport const getTopPromoters = async (topCount = 10) => {\r\n  try {\r\n    const q = query(\r\n      promotersCollection, \r\n      orderBy('leafletsCount', 'desc'), \r\n      limit(topCount)\r\n    );\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    return querySnapshot.docs.map(doc => ({\r\n      id: doc.id,\r\n      ...doc.data()\r\n    }));\r\n  } catch (error) {\r\n    console.error('Ошибка при получении топ промоутеров:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Получить промоутера по ID\r\nexport const getPromoterById = async (id) => {\r\n  try {\r\n    const docRef = doc(db, 'promoters', id);\r\n    const docSnap = await getDoc(docRef);\r\n    \r\n    if (docSnap.exists()) {\r\n      return {\r\n        id: docSnap.id,\r\n        ...docSnap.data()\r\n      };\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка при получении промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Добавить нового промоутера\r\nexport const addPromoter = async (promoterData, avatarFile) => {\r\n  try {\r\n    // Вместо загрузки файла используем генерацию аватара по имени\r\n    // или URL, если он предоставлен в promoterData.avatarUrl\r\n    let avatarUrl = promoterData.avatarUrl || '';\r\n    \r\n    if (!avatarUrl && promoterData.name) {\r\n      avatarUrl = generateAvatarUrl(promoterData.name);\r\n    }\r\n    \r\n    // Создаем документ промоутера\r\n    const newPromoter = {\r\n      name: promoterData.name,\r\n      avatarUrl,\r\n      leafletsCount: Number(promoterData.leafletsCount) || 0,\r\n      workDays: Number(promoterData.workDays) || 0,\r\n      district: promoterData.district || '',\r\n      createdAt: serverTimestamp(),\r\n      updatedAt: serverTimestamp()\r\n    };\r\n    \r\n    // Рассчитываем скорость только если есть дни работы\r\n    if (newPromoter.workDays > 0) {\r\n      newPromoter.speed = Math.round(newPromoter.leafletsCount / newPromoter.workDays);\r\n    } else {\r\n      newPromoter.speed = 0;\r\n    }\r\n    \r\n    const docRef = await addDoc(promotersCollection, newPromoter);\r\n    return {\r\n      id: docRef.id,\r\n      ...newPromoter\r\n    };\r\n  } catch (error) {\r\n    console.error('Ошибка при добавлении промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Обновить данные промоутера\r\nexport const updatePromoter = async (id, promoterData, avatarFile) => {\r\n  try {\r\n    const promoterRef = doc(db, 'promoters', id);\r\n    const promoterSnap = await getDoc(promoterRef);\r\n    \r\n    if (!promoterSnap.exists()) {\r\n      throw new Error('Промоутер не найден');\r\n    }\r\n    \r\n    const currentData = promoterSnap.data();\r\n    \r\n    // Определяем URL аватара\r\n    let avatarUrl = promoterData.avatarUrl || currentData.avatarUrl;\r\n    \r\n    // Если имя изменилось и нет URL аватара, генерируем новый\r\n    if (!avatarUrl && promoterData.name && promoterData.name !== currentData.name) {\r\n      avatarUrl = generateAvatarUrl(promoterData.name);\r\n    }\r\n    \r\n    // Обновляем документ\r\n    const updatedPromoter = {\r\n      ...promoterData,\r\n      avatarUrl,\r\n      leafletsCount: Number(promoterData.leafletsCount) || 0,\r\n      workDays: Number(promoterData.workDays) || 0,\r\n      district: promoterData.district || '',\r\n      updatedAt: serverTimestamp()\r\n    };\r\n    \r\n    // Рассчитываем скорость только если есть дни работы\r\n    if (updatedPromoter.workDays > 0) {\r\n      updatedPromoter.speed = Math.round(updatedPromoter.leafletsCount / updatedPromoter.workDays);\r\n    } else {\r\n      updatedPromoter.speed = 0;\r\n    }\r\n    \r\n    await updateDoc(promoterRef, updatedPromoter);\r\n    \r\n    return {\r\n      id,\r\n      ...updatedPromoter\r\n    };\r\n  } catch (error) {\r\n    console.error('Ошибка при обновлении промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Удалить промоутера\r\nexport const deletePromoter = async (id) => {\r\n  try {\r\n    const promoterRef = doc(db, 'promoters', id);\r\n    const promoterSnap = await getDoc(promoterRef);\r\n    \r\n    if (!promoterSnap.exists()) {\r\n      throw new Error('Промоутер не найден');\r\n    }\r\n    \r\n    // Удаляем документ\r\n    await deleteDoc(promoterRef);\r\n    \r\n    return id;\r\n  } catch (error) {\r\n    console.error('Ошибка при удалении промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Получить данные о лучшем промоутере месяца\r\nexport const getTopPromoter = async () => {\r\n  try {\r\n    const docSnap = await getDoc(topPromoterDoc);\r\n    \r\n    if (docSnap.exists()) {\r\n      return docSnap.data();\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка при получении лучшего промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Установить лучшего промоутера месяца\r\nexport const setTopPromoter = async (topPromoterData) => {\r\n  try {\r\n    // Если нет URL аватара, но есть имя, генерируем аватар\r\n    if (!topPromoterData.avatarUrl && topPromoterData.name) {\r\n      topPromoterData.avatarUrl = generateAvatarUrl(topPromoterData.name);\r\n    }\r\n    \r\n    await setDoc(topPromoterDoc, {\r\n      ...topPromoterData,\r\n      date: serverTimestamp()\r\n    });\r\n    \r\n    return topPromoterData;\r\n  } catch (error) {\r\n    console.error('Ошибка при установке лучшего промоутера:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Получить настройки сайта\r\nexport const getSettings = async () => {\r\n  try {\r\n    const docSnap = await getDoc(settingsDoc);\r\n    \r\n    if (docSnap.exists()) {\r\n      return docSnap.data();\r\n    } else {\r\n      // Создаем документ с настройками по умолчанию, если его нет\r\n      const defaultSettings = {\r\n        companyLogo: 'https://via.placeholder.com/200x60?text=Logo',\r\n        headerText: 'Конкурс для лучших! Стань топ-промоутером Петрозаводска!',\r\n        telegramChannel: '',\r\n        managerContacts: []\r\n      };\r\n      \r\n      await setDoc(settingsDoc, defaultSettings);\r\n      return defaultSettings;\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка при получении настроек:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Обновить настройки сайта\r\nexport const updateSettings = async (settingsData, logoFile) => {\r\n  try {\r\n    // Используем URL логотипа из settingsData или оставляем текущий\r\n    const updatedSettings = {\r\n      ...settingsData\r\n    };\r\n    \r\n    await setDoc(settingsDoc, updatedSettings);\r\n    \r\n    return updatedSettings;\r\n  } catch (error) {\r\n    console.error('Ошибка при обновлении настроек:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"AAAA,SACEA,UAAU,EACVC,GAAG,EACHC,OAAO,EACPC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,eAAe,EACfC,MAAM,QACD,oBAAoB;AAC3B,SAASC,EAAE,QAAQ,UAAU;;AAE7B;AACA,MAAMC,mBAAmB,GAAGb,UAAU,CAACY,EAAE,EAAE,WAAW,CAAC;AACvD;AACA,MAAME,kBAAkB,GAAGd,UAAU,CAACY,EAAE,EAAE,UAAU,CAAC;AACrD,MAAMG,cAAc,GAAGd,GAAG,CAACa,kBAAkB,EAAE,aAAa,CAAC;AAC7D,MAAME,WAAW,GAAGf,GAAG,CAACa,kBAAkB,EAAE,SAAS,CAAC;;AAEtD;AACA,MAAMG,iBAAiB,GAAIC,IAAI,IAAK;EAClC;EACA,MAAMC,WAAW,GAAGC,kBAAkB,CAACF,IAAI,CAAC;EAC5C,OAAO,oCAAoCC,WAAW,uCAAuC;AAC/F,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMC,CAAC,GAAGf,KAAK,CAACM,mBAAmB,EAAEL,OAAO,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;IACtE,MAAMe,aAAa,GAAG,MAAMrB,OAAO,CAACoB,CAAC,CAAC;IAEtC,OAAOC,aAAa,CAACC,IAAI,CAACC,GAAG,CAACxB,GAAG,KAAK;MACpCyB,EAAE,EAAEzB,GAAG,CAACyB,EAAE;MACV,GAAGzB,GAAG,CAAC0B,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAOC,QAAQ,GAAG,EAAE,KAAK;EACtD,IAAI;IACF,MAAMT,CAAC,GAAGf,KAAK,CACbM,mBAAmB,EACnBL,OAAO,CAAC,eAAe,EAAE,MAAM,CAAC,EAChCC,KAAK,CAACsB,QAAQ,CAChB,CAAC;IACD,MAAMR,aAAa,GAAG,MAAMrB,OAAO,CAACoB,CAAC,CAAC;IAEtC,OAAOC,aAAa,CAACC,IAAI,CAACC,GAAG,CAACxB,GAAG,KAAK;MACpCyB,EAAE,EAAEzB,GAAG,CAACyB,EAAE;MACV,GAAGzB,GAAG,CAAC0B,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,eAAe,GAAG,MAAON,EAAE,IAAK;EAC3C,IAAI;IACF,MAAMO,MAAM,GAAGhC,GAAG,CAACW,EAAE,EAAE,WAAW,EAAEc,EAAE,CAAC;IACvC,MAAMQ,OAAO,GAAG,MAAM/B,MAAM,CAAC8B,MAAM,CAAC;IAEpC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACpB,OAAO;QACLT,EAAE,EAAEQ,OAAO,CAACR,EAAE;QACd,GAAGQ,OAAO,CAACP,IAAI,CAAC;MAClB,CAAC;IACH,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,WAAW,GAAG,MAAAA,CAAOC,YAAY,EAAEC,UAAU,KAAK;EAC7D,IAAI;IACF;IACA;IACA,IAAIC,SAAS,GAAGF,YAAY,CAACE,SAAS,IAAI,EAAE;IAE5C,IAAI,CAACA,SAAS,IAAIF,YAAY,CAACnB,IAAI,EAAE;MACnCqB,SAAS,GAAGtB,iBAAiB,CAACoB,YAAY,CAACnB,IAAI,CAAC;IAClD;;IAEA;IACA,MAAMsB,WAAW,GAAG;MAClBtB,IAAI,EAAEmB,YAAY,CAACnB,IAAI;MACvBqB,SAAS;MACTE,aAAa,EAAEC,MAAM,CAACL,YAAY,CAACI,aAAa,CAAC,IAAI,CAAC;MACtDE,QAAQ,EAAED,MAAM,CAACL,YAAY,CAACM,QAAQ,CAAC,IAAI,CAAC;MAC5CC,QAAQ,EAAEP,YAAY,CAACO,QAAQ,IAAI,EAAE;MACrCC,SAAS,EAAEnC,eAAe,CAAC,CAAC;MAC5BoC,SAAS,EAAEpC,eAAe,CAAC;IAC7B,CAAC;;IAED;IACA,IAAI8B,WAAW,CAACG,QAAQ,GAAG,CAAC,EAAE;MAC5BH,WAAW,CAACO,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACT,WAAW,CAACC,aAAa,GAAGD,WAAW,CAACG,QAAQ,CAAC;IAClF,CAAC,MAAM;MACLH,WAAW,CAACO,KAAK,GAAG,CAAC;IACvB;IAEA,MAAMd,MAAM,GAAG,MAAM7B,MAAM,CAACS,mBAAmB,EAAE2B,WAAW,CAAC;IAC7D,OAAO;MACLd,EAAE,EAAEO,MAAM,CAACP,EAAE;MACb,GAAGc;IACL,CAAC;EACH,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMsB,cAAc,GAAG,MAAAA,CAAOxB,EAAE,EAAEW,YAAY,EAAEC,UAAU,KAAK;EACpE,IAAI;IACF,MAAMa,WAAW,GAAGlD,GAAG,CAACW,EAAE,EAAE,WAAW,EAAEc,EAAE,CAAC;IAC5C,MAAM0B,YAAY,GAAG,MAAMjD,MAAM,CAACgD,WAAW,CAAC;IAE9C,IAAI,CAACC,YAAY,CAACjB,MAAM,CAAC,CAAC,EAAE;MAC1B,MAAM,IAAIkB,KAAK,CAAC,qBAAqB,CAAC;IACxC;IAEA,MAAMC,WAAW,GAAGF,YAAY,CAACzB,IAAI,CAAC,CAAC;;IAEvC;IACA,IAAIY,SAAS,GAAGF,YAAY,CAACE,SAAS,IAAIe,WAAW,CAACf,SAAS;;IAE/D;IACA,IAAI,CAACA,SAAS,IAAIF,YAAY,CAACnB,IAAI,IAAImB,YAAY,CAACnB,IAAI,KAAKoC,WAAW,CAACpC,IAAI,EAAE;MAC7EqB,SAAS,GAAGtB,iBAAiB,CAACoB,YAAY,CAACnB,IAAI,CAAC;IAClD;;IAEA;IACA,MAAMqC,eAAe,GAAG;MACtB,GAAGlB,YAAY;MACfE,SAAS;MACTE,aAAa,EAAEC,MAAM,CAACL,YAAY,CAACI,aAAa,CAAC,IAAI,CAAC;MACtDE,QAAQ,EAAED,MAAM,CAACL,YAAY,CAACM,QAAQ,CAAC,IAAI,CAAC;MAC5CC,QAAQ,EAAEP,YAAY,CAACO,QAAQ,IAAI,EAAE;MACrCE,SAAS,EAAEpC,eAAe,CAAC;IAC7B,CAAC;;IAED;IACA,IAAI6C,eAAe,CAACZ,QAAQ,GAAG,CAAC,EAAE;MAChCY,eAAe,CAACR,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACM,eAAe,CAACd,aAAa,GAAGc,eAAe,CAACZ,QAAQ,CAAC;IAC9F,CAAC,MAAM;MACLY,eAAe,CAACR,KAAK,GAAG,CAAC;IAC3B;IAEA,MAAM1C,SAAS,CAAC8C,WAAW,EAAEI,eAAe,CAAC;IAE7C,OAAO;MACL7B,EAAE;MACF,GAAG6B;IACL,CAAC;EACH,CAAC,CAAC,OAAO3B,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAM4B,cAAc,GAAG,MAAO9B,EAAE,IAAK;EAC1C,IAAI;IACF,MAAMyB,WAAW,GAAGlD,GAAG,CAACW,EAAE,EAAE,WAAW,EAAEc,EAAE,CAAC;IAC5C,MAAM0B,YAAY,GAAG,MAAMjD,MAAM,CAACgD,WAAW,CAAC;IAE9C,IAAI,CAACC,YAAY,CAACjB,MAAM,CAAC,CAAC,EAAE;MAC1B,MAAM,IAAIkB,KAAK,CAAC,qBAAqB,CAAC;IACxC;;IAEA;IACA,MAAM/C,SAAS,CAAC6C,WAAW,CAAC;IAE5B,OAAOzB,EAAE;EACX,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAM6B,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMvB,OAAO,GAAG,MAAM/B,MAAM,CAACY,cAAc,CAAC;IAE5C,IAAImB,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACpB,OAAOD,OAAO,CAACP,IAAI,CAAC,CAAC;IACvB,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAM8B,cAAc,GAAG,MAAOC,eAAe,IAAK;EACvD,IAAI;IACF;IACA,IAAI,CAACA,eAAe,CAACpB,SAAS,IAAIoB,eAAe,CAACzC,IAAI,EAAE;MACtDyC,eAAe,CAACpB,SAAS,GAAGtB,iBAAiB,CAAC0C,eAAe,CAACzC,IAAI,CAAC;IACrE;IAEA,MAAMP,MAAM,CAACI,cAAc,EAAE;MAC3B,GAAG4C,eAAe;MAClBC,IAAI,EAAElD,eAAe,CAAC;IACxB,CAAC,CAAC;IAEF,OAAOiD,eAAe;EACxB,CAAC,CAAC,OAAO/B,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMiC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAM3B,OAAO,GAAG,MAAM/B,MAAM,CAACa,WAAW,CAAC;IAEzC,IAAIkB,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACpB,OAAOD,OAAO,CAACP,IAAI,CAAC,CAAC;IACvB,CAAC,MAAM;MACL;MACA,MAAMmC,eAAe,GAAG;QACtBC,WAAW,EAAE,8CAA8C;QAC3DC,UAAU,EAAE,0DAA0D;QACtEC,eAAe,EAAE,EAAE;QACnBC,eAAe,EAAE;MACnB,CAAC;MAED,MAAMvD,MAAM,CAACK,WAAW,EAAE8C,eAAe,CAAC;MAC1C,OAAOA,eAAe;IACxB;EACF,CAAC,CAAC,OAAOlC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMuC,cAAc,GAAG,MAAAA,CAAOC,YAAY,EAAEC,QAAQ,KAAK;EAC9D,IAAI;IACF;IACA,MAAMC,eAAe,GAAG;MACtB,GAAGF;IACL,CAAC;IAED,MAAMzD,MAAM,CAACK,WAAW,EAAEsD,eAAe,CAAC;IAE1C,OAAOA,eAAe;EACxB,CAAC,CAAC,OAAO1C,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}